!function(e,t,a){"use strict";function n(t,m,p){function H(t,a,n,i,r,s){Ce=Ie?0:Pe[we.horizontal?"width":"height"](),Se=0,Ne.each(function(s,o){var l,d=e(o),u=o.getBoundingClientRect();if(null===we.visibleItems)l=E(we.horizontal?u.width||u.right-u.left:u.height||u.bottom-u.top);else if("[object Array]"===Object.prototype.toString.call(we.visibleItems)){var f=e(window).width();f>=we.screen_md&&(l=Ce/we.visibleItems[0]),f<we.screen_md&&f>=we.screen_sm&&(l=Ce/we.visibleItems[1]),f<we.screen_sm&&(l=Ce/we.visibleItems[2])}else l=Ce/we.visibleItems;var v=c(d,we.horizontal?"marginLeft":"marginTop"),h=c(d,we.horizontal?"marginRight":"marginBottom"),m=l+v+h,p=!v||!h,g={};null!==we.visibleItems&&d.css("width",m),g.el=o,g.size=p?l:m,g.half=g.size/2,g.start=Se+(p?v:0),g.center=g.start-E(Ce/2-g.size/2),g.end=g.start-Ce+g.size,s||(Se+=t),Se+=m,pe=m,we.horizontal||areFloated||h&&v&&s>0&&(Se-=O(v,h)),s===a&&(g.end+=i,Se+=i,r=p?h:0),He.push(g),n=g}),ze[0].style[we.horizontal?"width":"height"]=(s?Se:Se-t-i)+"px",Se-=r,He.length?(Be.start=He[0][Re?"center":"start"],Be.end=Re?n.center:Ce<Se?n.end:Be.start):Be.start=Be.end=0}function X(a){var n=0,i=Oe.length;if(Be.old=e.extend({},Be),Ce=Ie?0:Pe[we.horizontal?"width":"height"](),De=Te[we.horizontal?"width":"height"](),Se=Ie?t:ze[we.horizontal?"outerWidth":"outerHeight"](),Oe.length=0,Be.start=0,Be.end=q(Se-Ce,0),We){n=He.length,Ne=ze.children(we.itemSelector),He.length=0;var r,s=c(ze,we.horizontal?"paddingLeft":"paddingTop"),o=c(ze,we.horizontal?"paddingRight":"paddingBottom"),l="border-box"===e(Ne).css("boxSizing"),u=("none"!==Ne.css("float"),0),f=Ne.length-1;if(Se=0,null!==we.visibleItems){var v,h=!1,m=200,p=function(){new Date-v<m?setTimeout(p,m):(h=!1,Q(),Z(),M(),H(s,f,r,o,u,l),be[_e?"toCenter":"toStart"](we.startAt))};e(window).resize(function(){v=new Date,h===!1&&(h=!0,setTimeout(p,m))})}H(s,f,r,o,u,l)}if(Be.center=E(Be.end/2+Be.start/2),Q(),ke.length&&De>0&&(we.dynamicHandle?(xe=Be.start===Be.end?De:E(De*Ce/Se),xe=d(xe,we.minHandleSize,De),ke[0].style[we.horizontal?"width":"height"]=xe+"px"):xe=ke[we.horizontal?"outerWidth":"outerHeight"](),Ae.end=De-xe,st||F()),!Ie&&Ce>0){var g=Be.start,y="";if(We)e.each(He,function(e,t){Re?Oe.push(t.center):t.start+t.size>g&&g<=Be.end&&(g=t.start,Oe.push(g),g+=Ce,g>Be.end&&g<Be.end+Ce&&Oe.push(Be.end))});else for(;g-Ce<Be.end;)Oe.push(g),g+=Ce;if(Ee[0]&&i!==Oe.length){for(var w=0;w<Oe.length;w++)y+=we.pageBuilder.call(be,w);qe=Ee.html(y).children(),qe.eq(Xe.activePage).addClass(we.activeClass)}}if(Xe.slideeSize=Se,Xe.frameSize=Ce,Xe.sbSize=De,Xe.handleSize=xe,We){a&&null!=we.startAt&&(U(we.startAt),be[_e?"toCenter":"toStart"](we.startAt));var b=He[Xe.activeItem];Y(_e&&b?b.center:d(Be.dest,Be.start,Be.end))}else a?null!=we.startAt&&Y(we.startAt,1):Y(d(Be.dest,Be.start,Be.end));me("load")}function Y(e,t,a){if(We&&it.released&&!a){var n=$(e),i=e>Be.start&&e<Be.end;_e?(i&&(e=He[n.centerItem].center),Re&&we.activateMiddle&&U(n.centerItem)):i&&(e=He[n.firstItem].start)}it.init&&it.slidee&&we.elasticBounds?e>Be.end?e=Be.end+(e-Be.end)/6:e<Be.start&&(e=Be.start+(e-Be.start)/6):e=d(e,Be.start,Be.end),at.start=+new Date,at.time=0,at.from=Be.cur,at.to=e,at.delta=e-Be.cur,at.tweesing=it.tweese||it.init&&!it.slidee,at.immediate=!at.tweesing&&(t||it.init&&it.slidee||!we.speed),it.tweese=0,e!==Be.dest&&(Be.dest=e,me("change"),st||j()),K(),Q(),Z(),M()}function j(){if(be.initialized){if(!st)return st=w(j),void(it.released&&me("moveStart"));at.immediate?Be.cur=at.to:at.tweesing?(at.tweeseDelta=at.to-Be.cur,D(at.tweeseDelta)<.1?Be.cur=at.to:Be.cur+=at.tweeseDelta*(it.released?we.swingSpeed:we.syncSpeed)):(at.time=O(+new Date-at.start,we.speed),Be.cur=at.from+at.delta*e.easing[we.easing](at.time/we.speed,at.time,0,1,we.speed)),at.to===Be.cur?(Be.cur=at.to,it.tweese=st=0):st=w(j),me("move"),Ie||(f?ze[0].style[f]=v+(we.horizontal?"translateX":"translateY")+"("+-Be.cur+"px)":ze[0].style[we.horizontal?"left":"top"]=-E(Be.cur)+"px"),!st&&it.released&&me("moveEnd"),F()}}function F(){ke.length&&(Ae.cur=Be.start===Be.end?0:((it.init&&!it.slidee?Be.dest:Be.cur)-Be.start)/(Be.end-Be.start)*Ae.end,Ae.cur=d(E(Ae.cur),Ae.start,Ae.end),tt.hPos!==Ae.cur&&(tt.hPos=Ae.cur,f?ke[0].style[f]=v+(we.horizontal?"translateX":"translateY")+"("+Ae.cur+"px)":ke[0].style[we.horizontal?"left":"top"]=Ae.cur+"px"))}function M(){qe[0]&&tt.page!==Xe.activePage&&(tt.page=Xe.activePage,qe.removeClass(we.activeClass).eq(Xe.activePage).addClass(we.activeClass),me("activePage",tt.page))}function L(){nt.speed&&Be.cur!==(nt.speed>0?Be.end:Be.start)||be.stop(),ct=it.init?w(L):0,nt.now=+new Date,nt.pos=Be.cur+(nt.now-nt.lastTime)/1e3*nt.speed,Y(it.init?nt.pos:E(nt.pos)),it.init||Be.cur!==Be.dest||me("moveEnd"),nt.lastTime=nt.now}function R(e,t,n){if("boolean"===i(t)&&(n=t,t=a),t===a)Y(Be[e],n);else{if(_e&&"center"!==e)return;var r=be.getPos(t);r&&Y(r[e],n,!_e)}}function _(e){return null!=e?l(e)?e>=0&&e<He.length?e:-1:Ne.index(e):-1}function W(e){return _(l(e)&&e<0?e+He.length:e)}function U(e,t){var a=_(e);return!(!We||a<0)&&((tt.active!==a||t)&&(Ne.eq(Xe.activeItem).removeClass(we.activeClass),Ne.eq(a).addClass(we.activeClass),tt.active=Xe.activeItem=a,Z(),me("active",a)),a)}function $(e){e=d(l(e)?e:Be.dest,Be.start,Be.end);var t={},a=Re?0:Ce/2;if(!Ie)for(var n=0,i=Oe.length;n<i;n++){if(e>=Be.end||n===Oe.length-1){t.activePage=Oe.length-1;break}if(e<=Oe[n]+a){t.activePage=n;break}}if(We){for(var r=!1,s=!1,o=!1,c=0,u=He.length;c<u;c++)if(r===!1&&e<=He[c].start+He[c].half&&(r=c),o===!1&&e<=He[c].center+He[c].half&&(o=c),c===u-1||e<=He[c].end+He[c].half){s=c;break}t.firstItem=l(r)?r:0,t.centerItem=l(o)?o:t.firstItem,t.lastItem=l(s)?s:t.centerItem}return t}function Q(t){e.extend(Xe,$(t))}function Z(){var e=Be.dest<=Be.start,t=Be.dest>=Be.end,a=(e?1:0)|(t?2:0);if(tt.slideePosState!==a&&(tt.slideePosState=a,Ke.is("button,input")&&Ke.prop("disabled",e),Ve.is("button,input")&&Ve.prop("disabled",t),Ke.add(Ze)[e?"addClass":"removeClass"](we.disabledClass),Ve.add(Qe)[t?"addClass":"removeClass"](we.disabledClass)),tt.fwdbwdState!==a&&it.released&&(tt.fwdbwdState=a,Ze.is("button,input")&&Ze.prop("disabled",e),Qe.is("button,input")&&Qe.prop("disabled",t)),We&&null!=Xe.activeItem){var n=0===Xe.activeItem,i=Xe.activeItem>=He.length-1,r=(n?1:0)|(i?2:0);tt.itemsButtonState!==r&&(tt.itemsButtonState=r,Ge.is("button,input")&&Ge.prop("disabled",n),Je.is("button,input")&&Je.prop("disabled",i),Ge[n?"addClass":"removeClass"](we.disabledClass),Je[i?"addClass":"removeClass"](we.disabledClass))}}function G(e,t,a){if(e=W(e),t=W(t),e>-1&&t>-1&&e!==t&&(!a||t!==e-1)&&(a||t!==e+1)){Ne.eq(e)[a?"insertAfter":"insertBefore"](He[t].el);var n=e<t?e:a?t:t-1,i=e>t?e:a?t+1:t,r=e>t;null!=Xe.activeItem&&(e===Xe.activeItem?tt.active=Xe.activeItem=a?r?t+1:t:r?t:t-1:Xe.activeItem>n&&Xe.activeItem<i&&(tt.active=Xe.activeItem+=r?1:-1)),X()}}function J(e,t){for(var a=0,n=et[e].length;a<n;a++)if(et[e][a]===t)return a;return-1}function K(){it.released&&!be.isPaused&&be.resume()}function V(e){return E(d(e,Ae.start,Ae.end)/Ae.end*(Be.end-Be.start))+Be.start}function ee(){it.history[0]=it.history[1],it.history[1]=it.history[2],it.history[2]=it.history[3],it.history[3]=it.delta}function te(e){it.released=0,it.source=e,it.slidee="slidee"===e}function ae(t){var a="touchstart"===t.type,n=t.data.source,i="slidee"===n;it.init||!a&&re(t.target)||("handle"!==n||we.dragHandle&&Ae.start!==Ae.end)&&(i&&!(a?we.touchDragging:we.mouseDragging&&t.which<2)||(a||r(t),te(n),it.init=0,it.$source=e(t.target),it.touch=a,it.pointer=a?t.originalEvent.touches[0]:t,it.initX=it.pointer.pageX,it.initY=it.pointer.pageY,it.initPos=i?Be.cur:Ae.cur,it.start=+new Date,it.time=0,it.path=0,it.delta=0,it.locked=0,it.history=[0,0,0,0],it.pathToLock=i?a?30:10:0,b.on(a?z:P,ne),be.pause(1),(i?ze:ke).addClass(we.draggedClass),me("moveStart"),i&&(ot=setInterval(ee,10))))}function ne(e){if(it.released="mouseup"===e.type||"touchend"===e.type,it.pointer=it.touch?e.originalEvent[it.released?"changedTouches":"touches"][0]:e,it.pathX=it.pointer.pageX-it.initX,it.pathY=it.pointer.pageY-it.initY,it.path=x(A(it.pathX,2)+A(it.pathY,2)),it.delta=we.horizontal?it.pathX:it.pathY,it.released||!(it.path<1)){if(!it.init){if(it.path<we.dragThreshold)return it.released?ie():a;if(!(we.horizontal?D(it.pathX)>D(it.pathY):D(it.pathX)<D(it.pathY)))return ie();it.init=1}r(e),!it.locked&&it.path>it.pathToLock&&it.slidee&&(it.locked=1,it.$source.on(S,s)),it.released&&(ie(),we.releaseSwing&&it.slidee&&(it.swing=(it.delta-it.history[0])/40*300,it.delta+=it.swing,it.tweese=D(it.swing)>10)),Y(it.slidee?E(it.initPos-it.delta):V(it.initPos+it.delta))}}function ie(){clearInterval(ot),it.released=!0,b.off(it.touch?z:P,ne),(it.slidee?ze:ke).removeClass(we.draggedClass),setTimeout(function(){it.$source.off(S,s)}),Be.cur===Be.dest&&it.init&&me("moveEnd"),be.resume(1),it.init=0}function re(t){return~e.inArray(t.nodeName,T)||e(t).is(we.interactive)}function se(){be.stop(),b.off("mouseup",se)}function oe(e){switch(r(e),this){case Qe[0]:case Ze[0]:be.moveBy(Qe.is(this)?we.moveBy:-we.moveBy),b.on("mouseup",se);break;case Ge[0]:be.prev();break;case Je[0]:be.next();break;case Ke[0]:be.prevPage();break;case Ve[0]:be.nextPage()}}function le(e){return rt.curDelta=(we.horizontal?e.deltaY||e.deltaX:e.deltaY)||-e.wheelDelta,rt.curDelta/=1===e.deltaMode?3:100,We?(h=+new Date,rt.last<h-rt.resetTime&&(rt.delta=0),rt.last=h,rt.delta+=rt.curDelta,D(rt.delta)<1?rt.finalDelta=0:(rt.finalDelta=E(rt.delta/1),rt.delta%=1),rt.finalDelta):rt.curDelta}function ce(e){e.originalEvent[g]=be;var t=+new Date;if(N+we.scrollHijack>t&&Ue[0]!==document&&Ue[0]!==window)return void(N=t);if(we.scrollBy&&Be.start!==Be.end){var a=le(e.originalEvent);(we.scrollTrap||a>0&&Be.dest<Be.end||a<0&&Be.dest>Be.start)&&r(e,1),be.slideBy(we.scrollBy*a)}}function de(e){we.clickBar&&e.target===Te[0]&&(r(e),Y(V((we.horizontal?e.pageX-Te.offset().left:e.pageY-Te.offset().top)-xe/2)))}function ue(e){if(we.keyboardNavBy)switch(e.which){case we.horizontal?37:38:r(e),be["pages"===we.keyboardNavBy?"prevPage":"prev"]();break;case we.horizontal?39:40:r(e),be["pages"===we.keyboardNavBy?"nextPage":"next"]()}}function fe(e){return re(this)?void(e.originalEvent[g+"ignore"]=!0):void(this.parentNode!==ze[0]||e.originalEvent[g+"ignore"]||be.activate(this))}function ve(){this.parentNode===Ee[0]&&be.activatePage(qe.index(this))}function he(e){we.pauseOnHover&&be["mouseenter"===e.type?"pause":"resume"](2)}function me(e,t){if(et[e]){for(ye=et[e].length,k.length=0,ge=0;ge<ye;ge++)k.push(et[e][ge]);for(ge=0;ge<ye;ge++)k[ge].call(be,e,t)}}if(!(this instanceof n))return new n(t,m,p);var pe,ge,ye,we=e.extend({},n.defaults,m),be=this,Ie=l(t),Pe=e(t),ze=we.slidee?e(we.slidee).eq(0):Pe.children().eq(0),Ce=0,Se=0,Be={start:0,center:0,end:0,cur:0,dest:0},Te=e(we.scrollBar).eq(0),ke=Te.children().eq(0),De=0,xe=0,Ae={start:0,end:0,cur:0},Ee=e(we.pagesBar),qe=0,Oe=[],Ne=0,He=[],Xe={firstItem:0,lastItem:0,centerItem:0,activeItem:null,activePage:0},Ye=new u(Pe[0]),je=new u(ze[0]),Fe=new u(Te[0]),Me=new u(ke[0]),Le="basic"===we.itemNav,Re="forceCentered"===we.itemNav,_e="centered"===we.itemNav||Re,We=!Ie&&(Le||_e||Re),Ue=we.scrollSource?e(we.scrollSource):Pe,$e=we.dragSource?e(we.dragSource):Pe,Qe=e(we.forward),Ze=e(we.backward),Ge=e(we.prev),Je=e(we.next),Ke=e(we.prevPage),Ve=e(we.nextPage),et={},tt={},at={},nt={},it={released:1},rt={last:0,delta:0,resetTime:200},st=0,ot=0,lt=0,ct=0;Ie||(t=Pe[0]),be.initialized=0,be.frame=t,be.slidee=ze[0],be.pos=Be,be.rel=Xe,be.items=He,be.pages=Oe,be.isPaused=0,be.options=we,be.dragging=it,be.reload=function(){X()},be.getPos=function(e){if(We){var t=_(e);return t!==-1&&He[t]}var a=ze.find(e).eq(0);if(a[0]){var n=we.horizontal?a.offset().left-ze.offset().left:a.offset().top-ze.offset().top,i=a[we.horizontal?"outerWidth":"outerHeight"]();return{start:n,center:n-Ce/2+i/2,end:n-Ce+i,size:i}}return!1},be.moveBy=function(e){nt.speed=e,!it.init&&nt.speed&&Be.cur!==(nt.speed>0?Be.end:Be.start)&&(nt.lastTime=+new Date,nt.startPos=Be.cur,te("button"),it.init=1,me("moveStart"),y(ct),L())},be.stop=function(){"button"===it.source&&(it.init=0,it.released=1)},be.prev=function(){be.activate(null==Xe.activeItem?0:Xe.activeItem-1)},be.next=function(){be.activate(null==Xe.activeItem?0:Xe.activeItem+1)},be.prevPage=function(){be.activatePage(Xe.activePage-1)},be.nextPage=function(){be.activatePage(Xe.activePage+1)},be.slideBy=function(e,t){e&&(We?be[_e?"toCenter":"toStart"](d((_e?Xe.centerItem:Xe.firstItem)+we.scrollBy*e,0,He.length)):Y(Be.dest+e,t))},be.slideTo=function(e,t){Y(e,t)},be.toStart=function(e,t){R("start",e,t)},be.toEnd=function(e,t){R("end",e,t)},be.toCenter=function(e,t){R("center",e,t)},be.getIndex=_,be.activate=function(e,t){var a=U(e);we.smart&&a!==!1&&(_e?be.toCenter(a,t):a>=Xe.lastItem?be.toStart(a,t):a<=Xe.firstItem?be.toEnd(a,t):K())},be.activatePage=function(e,t){l(e)&&Y(Oe[d(e,0,Oe.length-1)],t)},be.resume=function(e){we.cycleBy&&we.cycleInterval&&("items"!==we.cycleBy||He[0]&&null!=Xe.activeItem)&&!(e<be.isPaused)&&(be.isPaused=0,lt?lt=clearTimeout(lt):me("resume"),lt=setTimeout(function(){switch(me("cycle"),we.cycleBy){case"items":be.activate(Xe.activeItem>=He.length-1?0:Xe.activeItem+1);break;case"pages":be.activatePage(Xe.activePage>=Oe.length-1?0:Xe.activePage+1)}},we.cycleInterval))},be.pause=function(e){e<be.isPaused||(be.isPaused=e||100,lt&&(lt=clearTimeout(lt),me("pause")))},be.toggle=function(){be[lt?"pause":"resume"]()},be.set=function(t,a){e.isPlainObject(t)?e.extend(we,t):we.hasOwnProperty(t)&&(we[t]=a)},be.add=function(t,a){var n=e(t);We?(null==a||!He[0]||a>=He.length?n.appendTo(ze):He.length&&n.insertBefore(He[a].el),null!=Xe.activeItem&&a<=Xe.activeItem&&(tt.active=Xe.activeItem+=n.length)):ze.append(n),X()},be.remove=function(t){if(We){var a=W(t);if(a>-1){Ne.eq(a).remove();var n=a===Xe.activeItem;null!=Xe.activeItem&&a<Xe.activeItem&&(tt.active=--Xe.activeItem),X(),n&&(tt.active=null,be.activate(Xe.activeItem))}}else e(t).remove(),X()},be.moveAfter=function(e,t){G(e,t,1)},be.moveBefore=function(e,t){G(e,t)},be.on=function(e,t){if("object"===i(e))for(var a in e)e.hasOwnProperty(a)&&be.on(a,e[a]);else if("function"===i(t))for(var n=e.split(" "),r=0,s=n.length;r<s;r++)et[n[r]]=et[n[r]]||[],J(n[r],t)===-1&&et[n[r]].push(t);else if("array"===i(t))for(var o=0,l=t.length;o<l;o++)be.on(e,t[o])},be.one=function(e,t){function a(){t.apply(be,arguments),be.off(e,a)}be.on(e,a)},be.off=function(e,t){if(t instanceof Array)for(var a=0,n=t.length;a<n;a++)be.off(e,t[a]);else for(var i=e.split(" "),r=0,s=i.length;r<s;r++)if(et[i[r]]=et[i[r]]||[],null==t)et[i[r]].length=0;else{var o=J(i[r],t);o!==-1&&et[i[r]].splice(o,1)}},be.destroy=function(){return n.removeInstance(t),Ue.add(ke).add(Te).add(Ee).add(Qe).add(Ze).add(Ge).add(Je).add(Ke).add(Ve).off("."+g),b.off("keydown",ue),Ge.add(Je).add(Ke).add(Ve).removeClass(we.disabledClass),Ne&&null!=Xe.activeItem&&Ne.eq(Xe.activeItem).removeClass(we.activeClass),Ee.empty(),Ie||(Pe.off("."+g),Ye.restore(),je.restore(),Fe.restore(),Me.restore(),e.removeData(t,g)),He.length=Oe.length=0,tt={},be.initialized=0,be},be.init=function(){if(!be.initialized){if(n.getInstance(t))throw new Error("There is already a Sly instance on this element");n.storeInstance(t,be),be.on(p);var e=["overflow","position"],a=["position","webkitTransform","msTransform","transform","left","top","width","height"];Ye.save.apply(Ye,e),Fe.save.apply(Fe,e),je.save.apply(je,a),Me.save.apply(Me,a);var i=ke;return Ie||(i=i.add(ze),Pe.css("overflow","hidden"),f||"static"!==Pe.css("position")||Pe.css("position","relative")),f?v&&i.css(f,v):("static"===Te.css("position")&&Te.css("position","relative"),i.css({position:"absolute"})),we.forward&&Qe.on(B,oe),we.backward&&Ze.on(B,oe),we.prev&&Ge.on(S,oe),we.next&&Je.on(S,oe),we.prevPage&&Ke.on(S,oe),we.nextPage&&Ve.on(S,oe),Ue.on(C,ce),Te[0]&&Te.on(S,de),We&&we.activateOn&&Pe.on(we.activateOn+"."+g,"*",fe),Ee[0]&&we.activatePageOn&&Ee.on(we.activatePageOn+"."+g,"*",ve),$e.on(I,{source:"slidee"},ae),ke&&ke.on(I,{source:"handle"},ae),b.on("keydown",ue),Ie||(Pe.on("mouseenter."+g+" mouseleave."+g,he),Pe.on("scroll."+g,o)),be.initialized=1,X(!0),we.cycleBy&&!Ie&&be[we.startPaused?"pause":"resume"](),be}}}function i(e){return null==e?String(e):"object"==typeof e||"function"==typeof e?Object.prototype.toString.call(e).match(/\s([a-z]+)/i)[1].toLowerCase()||"object":typeof e}function r(e,t){e.preventDefault(),t&&e.stopPropagation()}function s(t){r(t,1),e(this).off(t.type,s)}function o(){this.scrollLeft=0,this.scrollTop=0}function l(e){return!isNaN(parseFloat(e))&&isFinite(e)}function c(e,t){return 0|E(String(e.css(t)).replace(/[^\-0-9.]/g,""))}function d(e,t,a){return e<t?t:e>a?a:e}function u(e){var t={};return t.style={},t.save=function(){if(e&&e.nodeType){for(var a=0;a<arguments.length;a++)t.style[arguments[a]]=e.style[arguments[a]];return t}},t.restore=function(){if(e&&e.nodeType){for(var a in t.style)t.style.hasOwnProperty(a)&&(e.style[a]=t.style[a]);return t}},t}var f,v,h,m="sly",p="Sly",g=m,y=t.cancelAnimationFrame||t.cancelRequestAnimationFrame,w=t.requestAnimationFrame,b=e(document),I="touchstart."+g+" mousedown."+g,P="mousemove."+g+" mouseup."+g,z="touchmove."+g+" touchend."+g,C=(document.implementation.hasFeature("Event.wheel","3.0")?"wheel.":"mousewheel.")+g,S="click."+g,B="mousedown."+g,T=["INPUT","SELECT","BUTTON","TEXTAREA"],k=[],D=Math.abs,x=Math.sqrt,A=Math.pow,E=Math.round,q=Math.max,O=Math.min,N=0;b.on(C,function(e){var t=e.originalEvent[g],a=+new Date;(!t||t.options.scrollHijack<a-N)&&(N=a)}),n.getInstance=function(t){return e.data(t,g)},n.storeInstance=function(t,a){return e.data(t,g,a)},n.removeInstance=function(t){return e.removeData(t,g)},function(e){function t(e){var t=(new Date).getTime(),n=Math.max(0,16-(t-a)),i=setTimeout(e,n);return a=t,i}w=e.requestAnimationFrame||e.webkitRequestAnimationFrame||t;var a=(new Date).getTime(),n=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.clearTimeout;y=function(t){n.call(e,t)}}(window),function(){function e(e){for(var n=0,i=t.length;n<i;n++){var r=t[n]?t[n]+e.charAt(0).toUpperCase()+e.slice(1):e;if(null!=a.style[r])return r}}var t=["","Webkit","Moz","ms","O"],a=document.createElement("div");f=e("transform"),v=e("perspective")?"translateZ(0) ":""}(),t[p]=n,e.fn[m]=function(t,a){var r,s;return e.isPlainObject(t)||("string"!==i(t)&&t!==!1||(r=t===!1?"destroy":t,s=Array.prototype.slice.call(arguments,1)),t={}),this.each(function(e,i){var o=n.getInstance(i);o||r?o&&r&&o[r]&&o[r].apply(o,s):o=new n(i,t,a).init()})},n.defaults={slidee:null,horizontal:!1,itemNav:null,itemSelector:null,smart:!1,activateOn:null,activateMiddle:!1,scrollSource:null,scrollBy:0,scrollHijack:300,scrollTrap:!1,dragSource:null,mouseDragging:!1,touchDragging:!1,releaseSwing:!1,swingSpeed:.2,elasticBounds:!1,dragThreshold:3,interactive:null,scrollBar:null,dragHandle:!1,dynamicHandle:!1,minHandleSize:50,clickBar:!1,syncSpeed:.5,pagesBar:null,activatePageOn:null,pageBuilder:function(e){return"<li>"+(e+1)+"</li>"},forward:null,backward:null,prev:null,next:null,prevPage:null,nextPage:null,cycleBy:null,cycleInterval:5e3,pauseOnHover:!1,startPaused:!1,moveBy:300,speed:0,easing:"swing",startAt:null,keyboardNavBy:null,draggedClass:"dragged",activeClass:"active",disabledClass:"disabled",visibleItems:null,screen_sm:768,screen_md:992}}(jQuery,window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
